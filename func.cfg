#!/bin/bash
source update.cfg  #In Raspberry Pi it may require the whole path


trap dynamically_updated SIGUSR2

#----------------------------------------------------------------------------------------------
#
# This function handles failure reports.It sends an issue to Github and rollbacks to previous version
# Issue includes commit number, commit author as asignee and label of failure
#
# Parameters:  Failed commit number       Label of failure ("compile error", "Merging conflict")
#
#-----------------------------------------------------------------------------------------------

function update_failed ()
{
	#Get number of failed commitment and save it in configuration file
         #cat /dev/null >../temp_files/update.conf
         #echo $1 >>../temp_files/update.conf
         
	sed -i '/failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg    #/home/pi/git/update.cfg
	echo "export failed_commit="$1  >>   /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg


        #Send email alert
         #echo  "Update software compilation failed"| mail -s "P$

      #Find out commit's author. Now this is already done while checking signature
      
     #echo "commit author" $author
   
     #Send issue and assign it to the author of the failed commit
       curl -H 'Authorization: token 4ba329d592f0243d946a3d8ca51c0b569c6c0ebc'      -d '{  
          "title": "commit '"$1"'",  
          "body": "'"$2"''"$3"'", 
           "assignee": "'"$author"'",
           "labels": ["'"$2"'","bug"]  
         }'      https://api.github.com/repos/Facj/Repo1/issues > ../temp_files/error.log 2>&1


	  #Rollback to previous version and undo changes that have already been performed
        git reset --hard ORIG_HEAD >/dev/null 2>&1
	#compile_update #Changed c files are already in the c_files array

}


#----------------------------------------------------------------------------------------------
#
# This function handles security problems reports.It sends an issue to Github.
# Issue includes commit number and label of security problem. No asignee is provided.
#
# Parameters:  Unsafe commit number       Label of failure 
#
#-----------------------------------------------------------------------------------------------

function security_problem ()
{
	#Get number of unsafe commitment and save it in configuration file
         #cat /dev/null >../temp_files/update.conf
         #echo $1 >>../temp_files/update.conf
         sed -i '/failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	 echo "export failed_commit="$1  >>/home/fatima/Raspi_sw/Update_sw/update.cfg  #/home/pi/git/update.cfg
   
     #Send issue and assign it to the author of the failed commit
       curl -H 'Authorization: token 4ba329d592f0243d946a3d8ca51c0b569c6c0ebc'      -d '{  
          "title": "commit '"$1"'",  
          "body": "'"$2"'",  
           "labels": ["'"$2"'","security"]  
         }'      https://api.github.com/repos/Facj/Repo1/issues > ../temp_files/error.log 2>&1

}



#----------------------------------------------------------------------------------------------
#
# This function compiles C update files.
# If not successful it calls the function update_failed and returns 1. 
#
# Parameters: commit_number
#
#-----------------------------------------------------------------------------------------------

function compile_update()
{               
   y=0
   while [ $y -lt ${#makefiles[@]} ]; do
	used_makefiles[$y]=false
	#echo $y	
	((y++))
   done


   t=0
   for z in "${c_files[@]}"; do

	y=0
	compiled=false
	for x in "${makefiles[@]}"; do
		#echo $x 
		exec=$(grep $z $x)
		if [ $? -eq 0 ];then
			#echo "Hay $z"
			if ! "${used_makefiles[$y]}" ; then
				#echo "No exec_before"			
				path=$(echo $x | sed -e 's/\/Makefile//')
				#echo $path
				make clean -C $path >dev/null 2>&1
				make -C $path >/dev/null 2>&1
				if [ $? -ne 0 ];then 
					update_failed $1 "Compilation error"  " in $x" 
					return 1
				fi
				used_makefiles[$y]=true
				
			fi
			#If the compiled file is not a test, it is saved in compiled_c_filese
			compiled=true
			name_start=$(echo ${exec:0:4})
			if [ "$name_start" != "test" ]
			then		
				exec=$(echo $exec | grep -Po '(.*)(:)')			
				compiled_c_files[$t]=$(echo $exec | sed 's/://')
				((t++))
			fi
				
		#else
				#echo "No hay $z"
		fi
		((y++))
	done

	if ! "$compiled"; then
		exec=$(echo $z | awk -F'.' '{print ""$1}')
		#echo "compile $exec"
		gcc $z -o $exec  >/dev/null 2>&1
		if [ $? -ne 0 ]
		then
			echo $x "compile failed"
			update_failed $1 "Compilation error"  " in $x" 
			return 1
		else
			#If the compiled file is not a test, it is saved in compiled_c_files
			name_start=$(echo ${exec:0:4})
			if [ "$name_start" != "test" ]
			then		
				compiled_c_files[$t]=$exec
 				((t++))
			fi
		fi 	
	fi
   done 
   return 0
}

#----------------------------------------------------------------------------------------------
#
# This function sorts the update files in arrays according to the programming language (C and Python).
# It leaves out the Python test files, so as to be treated in different way than source files.
# C test files are left out once compilated.
#
# Parameters: commit_number
#
#-----------------------------------------------------------------------------------------------

function sort_update_files()
{               

    y=0
    z=0
    #Check if updated files are C or Python source files
    for x in "${changed_files[@]}"; do
        arr=$(echo $x | awk -F'.' '{print ""$2}') 
        if [ "$arr" == "c" ]
        then  
		c_files[$y]=$x
             	((y++))
	    
	else if [ "$arr" == "py" ]
	     then
			name_start=$(echo ${x:0:4})
			if [ "$name_start" != "test" ]
			then		
				python_files[$z]=$x
				((z++))
			fi
	     fi    
	fi 
    done
    return 0
}


#----------------------------------------------------------------------------------------------
#
# This function gets the current version number of the dynamically updatable c files changed in the update.
# So as to a file can be recognized as dynamically updatable -v must be provided and on the output
# version number and "dynamically updatable" must appear
#
# Parameters: no parameters
#
#-----------------------------------------------------------------------------------------------

function get_current_versions()
{

    y=0
    for x in "${c_files[@]}"; do
	exec=$(echo $x | awk -F'.' '{print ""$1}')
	#echo "Get version from $exec"
	prid1=( $(pidof $exec) )
    	ver=$(./$exec -v) & 
	sleep 0.1
	prid2=( $(pidof $exec) )
	if [ ${#prid1[@]} -lt ${#prid2[@]} ]; then
		#echo "$x running"
		kill ${prid2[0]} 
		current_c_versions[$y]="No"
		#echo "version not provided"
		((y++))
	else
		 #echo "version provided"
   		output=$(./$exec -v)
		version=$(echo $output | grep -Po '(version )\d+(?:\.\d+){1}')
		version=$(echo $version | grep -Po '\d+(?:\.\d+){1}')
                dyn=$(echo $output | grep "Dynamically updatable")
		compatible=$(echo $output | grep -Po '(Compatible from )\d+(?:\.\d+){1}')
		compatible=$(echo $compatible | grep -Po '\d+(?:\.\d+){1}')
		#echo "Compatible with $compatible"
		#echo $version
		if [ -n "$dyn" ] && [ -n "$version" ] 
		then
			current_c_versions[$y]=$version
		else
			current_c_versions[$y]="No"
		fi
		((y++))
			
	fi	
	
done
    return 0
}



#----------------------------------------------------------------------------------------------
#
# This function checks what files have been updated and saves them in the array changed_files
# 
# Parameters: commit_number
#
#-----------------------------------------------------------------------------------------------

function check_updated_files()
{
       x=0
         changed=$(git whatchanged $1 -1 --pretty=oneline)
         #echo $changed_files
         read -r line  <<< "$1"  #First line is ignored
          
        while read -r line;do
         if [ $x -ne 0 ]
           then
	     arr=$(echo $line | awk -F'M ' '{print ""$2}') 
             changed_files[$x]=$arr
            #echo ${changed_files[$x]}
	 fi 
         
        ((x++))

         done <<< "$changed" 
}



function check_rollback_files(){

         x=1
	#Check what has changed in the rollback
	changed=$(git diff --raw $1 $2)
         #echo "changed = " $changed

	 while read -r line;do
         if [ $x -ne 0 ]
           then
	     arr=$(echo $line | awk -F'M ' '{print ""$2}') 
             changed_files[$x]=$arr
             #echo ${changed_files[$x]}
	 fi 
         
        ((x++))

         done <<< "$changed" 
}

#-----------------------------------------------------------------------------------------------------------
#
# This function is called once the update has been successfully downloaded and compiled (if required).
# It updates global variables: failed commit, previous update (saved so as rollback is possible in the future. 
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function successful_update(){

	#echo $previous_update $current_commit $failed_commit

	sed -i '/failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg   #not working without complete path
	sed -i '/previous_update*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg  #/home/pi/git/update.cfg
	sed -i '/current_commit*./d'  /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg
	echo "export failed_commit=\"\""  >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	echo "export previous_update="$current_commit    >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	echo "export current_commit="$(git rev-parse HEAD) >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg


#echo $previous_update $current_commit

}

#-----------------------------------------------------------------------------------------------------------
#
# This function checks it there are new commitments in the repository that have not been proved wrong before.
# If variable received is true it calls the function that checks if commits have been tagged and signed
# If new commits availale returns 0.
#
# Parameters: key_check
#
#------------------------------------------------------------------------------------------------------------

function check_available_update(){

     #Check if there are new commits
    git fetch origin >/dev/null 2>&1
   
   if $1; then
        check_available_signed_update
        return $?   
  else

   cherry_out=$(git cherry master origin)
    #echo "result from cherry:" $cherry_out
    
    if [ "$cherry_out" != "" ]
    then  
        #Check last commit id
	cherry_out=$(git cherry master origin)
	while read -r line;do
            last_line=$line
	done <<< "$cherry_out" 
	new_v=${last_line:2:40}
  
       #Check if this commitment has been proved wrong before
	#old_v=$(head -n 1 ../temp_files/update.conf)
	old_v=$failed_commit

	if [ "$old_v" == "" ] || [ "$new_v" != "$old_v" ] 
	then   
            return 0     
	else
	    return 1
	fi  
    else
	return 1
	
    fi
fi
}



#-----------------------------------------------------------------------------------------------------------
#
# This function checks it there are new commitments in the repository that haven been tagged, signed by trusted
# source and not proved wrong before.
# If new trusted commits available returns 0.
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function check_available_signed_update(){
	typeset lines;
	#old_v=$(head -n 1 ../temp_files/update.conf)
	old_v=$failed_commit

	git describe --abbrev=0 >/dev/null 2>&1
	if [ $? -eq 0 ]
	then
		current_tag=$(git describe --abbrev=0) 
	fi

	x=0

	#echo $current_tag
        #Check last commit id
    	cherry_out=$(git cherry master origin)
    	while read -r line;do
        	lines[x]=$line
        	 x=$((x+1))
    	done <<< "$cherry_out" 

  	if [ "$cherry_out" != "" ]
     	then
    		element=${#lines[@]} ;
    
    	for x in "${lines[@]}"; do
		element=$((element-1));
		new_v=${lines[element]:2:40}
		#echo $element  $new_v

       #Check if this commitment has been proved wrong before
       #If yes, not correct updates available
       #If not, check the tag
	
	if [ "$old_v" == "" ] || [ "$new_v" != "$old_v" ] 
	then   
	    
	    new_tag=$(git describe $new_v --abbrev=0) </dev/null 2>&1
	   
	    if [ "$current_tag" == "$new_tag" ]
	    then
		#echo "Not a new tag.Not updating" $new_tag
                return 1;
	    else
		#echo "New tag" $new_tag
		
		commit_tag=$(git describe $new_v)
		if [ "$new_tag" == "$commit_tag" ]
		then
		    #echo "This commit is a new tag.Verify"
		    
		    git verify-tag $new_tag >../temp_files/verified_signature.txt 2>&1   
		    if [ $? -ne 0 ]
		    then
			echo "Not signed or untrusted signature"   #Signature doesn't exist or is not in our keyring
			security_problem $new_v "Not signed or untrusted signature"
			#return 1 
		    else
			#echo "Trusted signature"   #Signature in our keyring 
			check_update_author $new_v
           		check_signature_holder 
            		if [ $? -eq 0 ]
        		 then
           			return 0
   
            		else
				echo "Commiter is not the signature holder"
                 		security_problem $new_v "Signature theft"
				#return 1 
             		fi                     
		    fi
		    
		#else
		    #echo "This commit is not tagged. Search for the tag commit"
		    
		    
		fi
	    fi
	 	    
         else
	    return 1
	fi  
        
    done
    
fi
return 1
      
}



#-----------------------------------------------------------------------------------------------------------
#
# This function checks who is the owner of the signature provided in the tag that is being check.
# If it matches the author of the tag commit it returns 0.
# If not it returns 1
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function check_signature_holder(){
   
    
   #check_author's email
   author_email=$(findGitHubEmail $author)
   echo $author $author_email

  #Check signature holder
   holder=$(grep -Eio '[a-z0-9._-]+@[a-z0-9.-]+[a-z]{2,4}' ../temp_files/verified_signature.txt)
   
  #Compare checking the email address
 	if [ "$holder" == "$author_email" ]
	 then
     	     #echo "Signature correct"
             return 0
        else
	    echo -e "Signature theft.\nUpdate signed by = $author_email. Signature holder = $holder"
            return 1
	fi

}

#-----------------------------------------------------------------------------------------------------------
#
# This function sends HTTP request through GitHub API to find out who is the author of the update
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function check_update_author(){

	#Find out commit's author
	curl -s -X GET  https://api.github.com/repos/Facj/Repo1/git/commits/$new_v > ../temp_files/json_author.txt 2>&1
	#author=$(cat json_author.txt | jq '.author.name')
	author=$(awk '/name/' ../temp_files/json_author.txt |sed -n 1p|awk -F": " '{split($2,a,",");print a[1]}')
        author=$(echo $author | tr -d '"')   #Remove character "" from author string     
}


#-----------------------------------------------------------------------------------------------------------
#
# This function sends HTTP request through GitHub API to find out who is the author of the self_update
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function check_self_update_author(){

	#Find out commit's author
	curl -s -X GET  https://api.github.com/repos/Facj/Update_sw/git/commits/$new_v > ../temp_files/json_author.txt 2>&1
	#author=$(cat json_author.txt | jq '.author.name')
	author=$(awk '/name/' ../temp_files/json_author.txt |sed -n 1p|awk -F": " '{split($2,a,",");print a[1]}')
        author=$(echo $author | tr -d '"')   #Remove character "" from author string     
}


#-----------------------------------------------------------------------------------------------------------
#
# This function checks if the update compiled files are current running processes and changes them for updated
#processes.
#
# Parameters: commit_number
#
#------------------------------------------------------------------------------------------------------------
function change_running_version()
{
    signaled_processes=0
    updated_processes=0
    index=0
    temp=0
    supported=true
    for x in "${compiled_c_files[@]}"; do
	exec=$x
    	prid=$(pidof $x)
	 case "$prid" in
             [0-9]*) #echo "$x running index $index"
	        	dynamic_update_supported $index #check if dynamic updates are supported by both old and new version
	                 if [ $? -eq 0 ]
		          then
				kill -s SIGUSR2 $prid
	                        ((signaled_processes++))
				temp=$(date --date="+60 second" +%s)
			else
				echo "Dynamic update not supported"
				supported=false 
				if $forced; then
				kill $prid
				echo "Forcd $exec update"
			 	./$exec & 
				
			        fi
			fi
			;;
	            ## *) echo "$x not running";;
		 esac
	((index++))	
	done

   if [ $signaled_processes -gt 0 ]; then
   	now=$(date +%s)  
   	echo "Waiting for updated processes..."
   	while [ "$now" -lt "$temp" ] && [ $updated_processes -lt $signaled_processes ]; do
		now=$(date +%s)	
	
   	done
 	if [ $updated_processes -lt $signaled_processes ]; then
		echo "update_failed" $1 "Dynamic update failure"
	return 1
   	else
		echo "Dynamic update successful"
		return 0
   	fi
   else if $supported; then
		echo "The updated processes are not running"
	fi
   fi
}

#-----------------------------------------------------------------------------------------------------------
#
# This function changes the frequency of update checking by modifying the crontab entry.
# Frequency can be given in minutes(m), hours(h) or days(d)
#
# Parameters: m/d/h frequency_value
#
#------------------------------------------------------------------------------------------------------------
function change_frequency(){

   #Remove previous crontab entry
    crontab -l | grep -v update.sh |crontab
   
   if [ $2 -eq 0 ]  #If the value received is 0 automatic updates are disabled
   then
        echo "Automatic update check  disabled"
   	return
   fi
   #Create new crontab entry
    case $1 in
	m) var="*/$2 * * * *";;
	h) var="0 */$2 * * *";;
	d) var="0 0 */$2 * *";;
    esac
    #echo "$var  bash /home/pi/git/update.sh >>/home/pi/git/update_record.txt"
    
   #Write entry to crontab
    {	crontab -l
	echo "$var  bash /home/pi/git/update.sh >>/home/pi/git/update_record.txt"
    } | (sleep 1; crontab -)
    
   echo "Crontab updated"
}

#-----------------------------------------------------------------------------------------------------------
#
# This function scans the repository for unittest for the compiled c files and the python files.
#
# Parameters: commit_number
#
#------------------------------------------------------------------------------------------------------------
function check_and_run_tests()
{

    for x in "${compiled_c_files[@]}"; do
	find "test_$x.c" >/dev/null 2>&1
   
	if [ $? -eq 0 ]; then    #If test available, it is run whether it is required or not
		./test_$x >/dev/null 2>&1
		if [ $? -ne 0 ]
		then 
			echo "Test for $x failed"
			update_failed $1 "Test failed"  ". Test $x has been unsuccessful"
			return 1
		#else
		#	echo "Test for $x has been SUCCESS"
		fi
	else
		if $require_test   #Test required but not available
		then
			echo "Required test for $x is not provided"
			update_failed $1 "No test provided"  ". Required test for $x is not provided"
			return 1
		fi
	fi
    done
  #The same with Python files

   for x in "${python_files[@]}"; do
        find "test_$x" >/dev/null 2>&1
   
	if [ $? -eq 0 ]; then    #If test available, it is run whether it is required or not
		python test_$x >/dev/null 2>&1
		if [ $? -ne 0 ]
		then 
			echo "Test for $x failed"
			update_failed $1 "Test failed"  ". Test $x has been unsuccessful"
			return 1
		#else
		#	echo "Test for $x has been SUCCESS"
		fi
	else
		if $require_test   #Test required but not available
		then
			echo "Required test for $x is not provided"
			update_failed $1  "No test provided"  ". Required test for $x is not provided"
			return 1
		fi
	fi
    done


}


#-----------------------------------------------------------------------------------------------------------
#
# This function checks email of the given GitHub user
#
# Parameters: GitHub_user_name
#
#------------------------------------------------------------------------------------------------------------

# FindGitHubEmail (https://github.com/hodgesmr/FindGitHubEmail)
# Copyright (c) 2013 Matt Hodges (http://matthodges.com)
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

function findGitHubEmail(){ 
USER=$1
PROFILERESPONSE=`curl -s https://api.github.com/users/$USER`
EMAIL=`echo "$PROFILERESPONSE" | grep "\"email\":" | sed -e's/[,|"]//g' | awk '{print $(NF)}' | grep -v null`

if [ -z "$EMAIL" ] ; then
  
  EVENTRESPONSE=`curl -s https://api.github.com/users/$USER/events/public`
  EMAIL=`echo "$EVENTRESPONSE" | grep "\"email\":" | sed -e's/[,|"]//g' | sort | uniq -c | sort -n | awk '{print $(NF)}' | grep -v null | tail -n1`
fi

if [ -n "$EMAIL" ] ; then
  echo "$EMAIL"
fi
}

#-----------------------------------------------------------------------------------------------------------
#
# This function is called once the update has been successfully downloaded and compiled (if required).
# It updates glob
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function rollback_update(){

        #Check if it's possible to rollback
	if [ -z "$previous_update" ]; then
		echo -e "Rollback to previous update not available.\nIt is not possible to perform several rollbacks in a row"
                return 1
	fi

	if $dynamic; then
		echo -e "Dynamic rollback not supported"
		return 1
	fi

	#echo $previous_update $current_commit
	
        check_rollback_files $previous_update $current_commit
        #echo $changed_files
        git reset --hard $previous_update
       
	#Compile and execute
	if $compile; then
		sort_update_files $previous_update
		compile_update
		if [ $? -ne 0 ]; then 
        		echo "Compilation error" #Could that happen???
        	#else
            		#echo ${compiled_c_files[*]}
			#successful_rollback
                	
            		
			
	    
		fi
	#else
		#successful_rollback       
	fi

	sed -i '/previous_update*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg
	sed -i '/current_commit*./d'  /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg
        sed -i '/failed_commit*./d'   /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg
        echo "export failed_commit="$current_commit >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg     #Update that has just been undone is considered not wanted
	echo "export current_commit="$previous_update    >>/home/fatima/Raspi_sw/Update_sw/update.cfg     #/home/pi/git/update.cfg
	echo "export previous_update=\"\"" >>/home/fatima/Raspi_sw/Update_sw/update.cfg    #/home/pi/git/update.cfg


}


#-----------------------------------------------------------------------------------------------------------
#
# This function is called when a SIGUSR2 signal is received, which means a process has been dinamically update
# successfully. It increments the updated_processes counter.
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function dynamically_updated()
{
	((updated_processes ++))

}



#-----------------------------------------------------------------------------------------------------------
#
# This function cheks if a running process support dynamic updates. Both the old and the new must support them
# and must be compatible for data conversion
#
# Parameters: exec_file_index
#
#------------------------------------------------------------------------------------------------------------
function dynamic_update_supported()
{
        exec=${compiled_c_files[$1]}
	
        #echo "Get version of $exec"
	#Check if current version supports dynamic updates
        #echo "Running version ${current_c_versions[$1]}"
	if [ "${current_c_versions[$1]}" == "No" ]
	then
		return 1 
	else
		prid1=( $(pidof $exec) )
		ver=$(./$exec -v) &
		sleep 0.1
		prid2=( $(pidof $exec) )
		if [ ${#prid1[@]} -lt ${#prid2[@]} ]; then
			#echo "$x running"
			kill ${prid2[0]} 
			current_c_versions[$y]="No"
			#echo "version not provided"
			((y++))
		else
			output=$(./$x -v)
			version=$(echo $output | grep -Po '(version )\d+(?:\.\d+){1}')
			version=$(echo $version | grep -Po '\d+(?:\.\d+){1}')
                        dyn=$(echo $output | grep "Dynamically updatable")
			compatible=$(echo $output | grep -Po '(Compatible from )\d+(?:\.\d+){1}')
			compatible=$(echo $compatible | grep -Po '\d+(?:\.\d+){1}')
			#echo "version $version compatible from $compatible"	
			if [ -n "$compatible" ] && [ -n "$dyn" ] && [ -n "$version" ]
			then
				compare_versions $compatible ${current_c_versions[$1]}
				return $?
			else
				return 1

			fi


			
		fi	
	fi       

}


#-----------------------------------------------------------------------------------------------------------
#
# This function compares to version numbers to find out if they are compatible for data conversion.
# If compatible, it returns 0. If not, it returns 1.
#
# Parameters: $version_from_which_new_compatibility_starts $running_version
#
#------------------------------------------------------------------------------------------------------------

function compare_versions()
{
	y=0
	for x in $(echo $1 | tr "." " ") ; do 
		version_1[$y]=$x
		((y++))
	done
	y=0
	for x in $(echo $2 | tr "." " ") ; do 
		version_2[$y]=$x
		((y++))
	done
	
	#Check which version number is greater
	if [ "${#version_1[@]}" -le "${#version_2[@]}" ]
	then
		loop=${#version_1[@]}	
	else
		loop=${#version_2[@]}
	fi

	index=0
	let loop=loop-1
	while [ $index -le $loop ]
	do
 		if [ "${version_2[$index]}" -lt "${version_1[$index]}" ]; then
			return 1
		fi
		if  [ "${version_2[$index]}" -gt "${version_1[$index]}" ]; then
			return 0 #$2 is greater
		fi
		
		let index=index+1
		
	done
	if [ "${#version_1[@]}" -le "${#version_2[@]}" ]
	then
		return 0
	else
		return 1
	fi
}


#-----------------------------------------------------------------------------------------------------------
#
# This function handles the self-update process. If no update is available or the self-update process fails, 
# it returns 0 so the update process can continue. Otherwise it returns 1 and the updater restarts itself.
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function self_update()
{

	cd $updater_path
        check_self_update
	if [ $? -ne 0 ]
	then
		echo "No self-update available"
		return 0
	fi
		
	echo "Self-update available" #$new_v        
  	#New commitment
    	git merge FETCH_HEAD --no-edit  >/dev/null 2>&1
    	if [ $? -ne 0 ]
   	then
		echo "Merging failed"
        	self_update_failed $new_v "Merging conflict"  
        	return 0
	fi
        
	#Test the new version. Rollback if failed
	bash test_update.sh
	if [ $? -ne 0 ]
	then
		update_failed $new_v "Test failed" 
		return 0
	else
        	#Self-update successfully accomplished
		successful_self_update	
		return 1
	fi
}

#-----------------------------------------------------------------------------------------------------------
#
# This function checks if there are valid available updates for the update system. Signature checks cannot 
# be avoided.
# If new trusted commits available returns 0.
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function check_self_update(){
	
	typeset lines;
	old_v=$self_failed_commit

	#Check if there are new commits
    	git fetch origin >/dev/null 2>&1

	#Get current tag
	git describe --abbrev=0 >/dev/null 2>&1
	if [ $? -eq 0 ]
	then
		current_tag=$(git describe --abbrev=0) 
	fi

	x=0

	echo $current_tag
        #Check last commit id
    	cherry_out=$(git cherry master origin)
    	while read -r line;do
        	lines[x]=$line
        	 x=$((x+1))
    	done <<< "$cherry_out" 

  	if [ "$cherry_out" != "" ]
     	then
    		element=${#lines[@]} ;
    
    	for x in "${lines[@]}"; do
		element=$((element-1));
		new_v=${lines[element]:2:40}
		echo $element  $new_v

       #Check if this commitment has been proved wrong before
       #If yes, not correct updates available
       #If not, check the tag
	
	if [ "$old_v" == "" ] || [ "$new_v" != "$old_v" ] 
	then   
	    
	    new_tag=$(git describe $new_v --abbrev=0) </dev/null 2>&1
	   
	    if [ "$current_tag" == "$new_tag" ]
	    then
		#echo "Not a new tag.Not updating" $new_tag
                return 1;
	    else
		#echo "New tag" $new_tag
		
		commit_tag=$(git describe $new_v)
		if [ "$new_tag" == "$commit_tag" ]
		then
		    #echo "This commit is a new tag.Verify"
		    
		    git verify-tag $new_tag >../temp_files/verified_signature.txt 2>&1   
		    if [ $? -ne 0 ]
		    then
			echo "Not signed or untrusted signature"   #Signature doesn't exist or is not in our keyring
			self_security_problem $new_v "Not signed or untrusted signature"
			#return 1 
		    else
			#echo "Trusted signature"   #Signature in our keyring 
			check_self_update_author $new_v
                        echo "Author =$author"
           		check_signature_holder
            		if [ $? -eq 0 ]
        		 then
           			return 0
   
            		else
				echo "Commiter is not the signature holder"
                 		self_security_problem $new_v "Signature theft"
				#return 1 
             		fi                     
		    fi
		    
		#else
		    #echo "This commit is not tagged. Search for the tag commit"
		    
		    
		fi
	    fi
	 	    
         else
	    return 1
	fi  
        
    done
    
fi
return 1
      
}

#----------------------------------------------------------------------------------------------
#
# This function handles self_update failure reports.It sends an issue to Github and rollbacks to previous version
# Issue includes commit number, commit author as asignee and label of failure
#
# Parameters:  Failed commit number       Label of failure ("Merging conflict", "Test failure")
#
#-----------------------------------------------------------------------------------------------

function self_update_failed ()
{
	#Get number of failed commitment and save it in configuration file
         #cat /dev/null >../temp_files/update.conf
         #echo $1 >>../temp_files/update.conf
         
	sed -i '/self_failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg    #/home/pi/git/update.cfg
	echo "export self_failed_commit="$1  >>   /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg

   
     #Send issue and assign it to the author of the failed commit
       curl -H 'Authorization: token 4ba329d592f0243d946a3d8ca51c0b569c6c0ebc'      -d '{  
          "title": "commit '"$1"'",  
          "body": "'"$2"''"$3"'", 
           "assignee": "'"$author"'",
           "labels": ["'"$2"'","bug"]  
         }'      https://api.github.com/repos/Facj/Update_sw/issues > ../temp_files/error.log 2>&1


	  #Rollback to previous version and undo changes that have already been performed
        git reset --hard ORIG_HEAD >/dev/null 2>&1
	#compile_update #Changed c files are already in the c_files array

}


#----------------------------------------------------------------------------------------------
#
# This function handles security problems reports while self-updating the system.It sends an issue to Github.
# Issue includes commit number and label of security problem. No asignee is provided.
#
# Parameters:  Unsafe commit number       Label of failure 
#
#-----------------------------------------------------------------------------------------------

function self_security_problem ()
{
	#Get number of unsafe commitment and save it in configuration file
         #cat /dev/null >../temp_files/update.conf
         #echo $1 >>../temp_files/update.conf
         sed -i '/self_failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	 echo "export self_failed_commit="$1  >>/home/fatima/Raspi_sw/Update_sw/update.cfg  #/home/pi/git/update.cfg
   
     #Send issue and assign it to the author of the failed commit
       curl -H 'Authorization: token 4ba329d592f0243d946a3d8ca51c0b569c6c0ebc'      -d '{  
          "title": "commit '"$1"'",  
          "body": "'"$2"'",  
           "labels": ["'"$2"'","security"]  
         }'      https://api.github.com/repos/Facj/Update_se/issues > ../temp_files/error.log 2>&1

}


#-----------------------------------------------------------------------------------------------------------
#
# This function is called once the self-update has been successfully downloaded and tested.
# It updates global variables of the self_update: failed commit, previous update (saved so as rollback is possible in the future. 
#
# Parameters: no parameters
#
#------------------------------------------------------------------------------------------------------------

function successful_update(){

	#echo $previous_update $current_commit $failed_commit

	sed -i '/self_failed_commit*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg   #not working without complete path
	sed -i '/self_previous_update*./d' /home/fatima/Raspi_sw/Update_sw/update.cfg  #/home/pi/git/update.cfg
	sed -i '/self_current_commit*./d'  /home/fatima/Raspi_sw/Update_sw/update.cfg #/home/pi/git/update.cfg
	echo "export self_failed_commit=\"\""  >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	echo "export self_previous_update="$current_commit    >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg
	echo "export self_current_commit="$(git rev-parse HEAD) >>/home/fatima/Raspi_sw/Update_sw/update.cfg   #/home/pi/git/update.cfg


#echo $previous_update $current_commit

}


